class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        max_sum = nums[0]
        curr_sum = nums[0]
        for num in nums[1:]:
            curr_sum = max(num, curr_sum + num)
            max_sum = max(max_sum, curr_sum)
        return max_sum

# OR by Using Divide and Conquer method
class Solution(object):
    def maxSubArray(self, nums):
        def helper(left, right):
            if left == right:
                return nums[left]
            mid = (left + right) // 2
            left_sum = helper(left, mid)
            right_sum = helper(mid + 1, right)

            # Find max crossing sum
            left_max = float('-inf')
            curr = 0
            for i in range(mid, left - 1, -1):
                curr += nums[i]
                left_max = max(left_max, curr)
            right_max = float('-inf')
            curr = 0
            for i in range(mid + 1, right + 1):
                curr += nums[i]
                right_max = max(right_max, curr)
            cross_sum = left_max + right_max

            return max(left_sum, right_sum, cross_sum)
        
        return helper(0, len(nums) - 1)
