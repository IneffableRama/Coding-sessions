import random
class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        def quickselect(left, right, k_smallest):
            if left == right:
                return nums[left]
            pivot_index = random.randint(left, right)
            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]
            store_index = left
            for i in range(left, right):
                if nums[i] < nums[right]:
                    nums[store_index], nums[i] = nums[i], nums[store_index]
                    store_index += 1
            nums[store_index], nums[right] = nums[right], nums[store_index]
            if store_index == k_smallest:
                return nums[store_index]
            elif store_index < k_smallest:
                return quickselect(store_index + 1, right, k_smallest)
            else:
                return quickselect(left, store_index - 1, k_smallest)
        n = len(nums)
        return quickselect(0, n - 1, n - k)

# Or this code also work for avoiding time limit exceeded

import heapq

class Solution(object):
    def findKthLargest(self, nums, k):
        return heapq.nlargest(k, nums)[-1]
